/**
 Copyright (C) <2016>  <Santhilata Kuppili Venkata>

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package SimpleGui;



import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.basic.IntConverter;
import com.thoughtworks.xstream.io.xml.StaxDriver;

import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.border.MatteBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author santhilata
 */
public class EpochPanel1 extends javax.swing.JPanel {

    final static boolean shouldFill = true;
    final static boolean shouldWeightX = true;
    final static boolean RIGHT_TO_LEFT = false;

    /**
     * Creates new form EpochPanel1
     */
    public EpochPanel1() {
        initComponents();
        String header[] = new String[] {"Feature","Value"};
        dtm.setColumnIdentifiers(header);
        featureTable.setModel(dtm);
        Color color = UIManager.getColor("Table.gridColor");
        MatteBorder border = new MatteBorder(1, 1, 0, 0, color);
        featureTable.setBorder(border);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        EpochCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        Epoch_pics = new javax.swing.JPanel();
        Epoch_tabs = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        featureTable = new javax.swing.JTable();

        jLabel2.setFont(new java.awt.Font("Ubuntu", 3, 24)); // NOI18N
        jLabel2.setText("QGen: Query Workload Generator");

        jLabel3.setText("Number of epochs in queryset");

        EpochCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0","1", "2", "3", "4", "5", "6" }));
        EpochCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                EpochComboItemStateChanged(evt);
            }
        });
        EpochCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EpochComboActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("Qgen_latest.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(223, 223, 223)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EpochCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(97, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jLabel2)
                                                .addGap(31, 31, 31)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel3)
                                                        .addComponent(EpochCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleParent(jPanel2);

        javax.swing.GroupLayout Epoch_picsLayout = new javax.swing.GroupLayout(Epoch_pics);
        Epoch_pics.setLayout(Epoch_picsLayout);
        Epoch_picsLayout.setHorizontalGroup(
                Epoch_picsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 729, Short.MAX_VALUE)
        );
        Epoch_picsLayout.setVerticalGroup(
                Epoch_picsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 134, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout Epoch_tabsLayout = new javax.swing.GroupLayout(Epoch_tabs);
        Epoch_tabs.setLayout(Epoch_tabsLayout);
        Epoch_tabsLayout.setHorizontalGroup(
                Epoch_tabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 719, Short.MAX_VALUE)
        );
        Epoch_tabsLayout.setVerticalGroup(
                Epoch_tabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 200, Short.MAX_VALUE)
        );

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generate Workload");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    generateButtonActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
                buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(buttonPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(resetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(exitButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(generateButton)
                                .addContainerGap(33, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
                buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(buttonPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(generateButton)
                                        .addComponent(exitButton)
                                        .addComponent(resetButton))
                                .addContainerGap(137, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(featureTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 13, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(Epoch_tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(12, 12, 12))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(Epoch_pics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(20, 20, 20))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(63, 63, 63)))
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Epoch_pics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Epoch_tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                               // .addGap(47, 47, 47)


                                                .addComponent(buttonPanel, GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(210,210,210))

                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(111, 111, 111))

                                .addContainerGap())
        );

        buttonPanel.getAccessibleContext().setAccessibleParent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE)
                                .addGap(0, 19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE)
                                .addGap(0, 50, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void EpochComboActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    public  void addComponents(JPanel pane, int epochs) {

        if (RIGHT_TO_LEFT) {
            pane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        }


        pane.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        if (shouldFill) {
            //natural height, maximum width
            c.fill = GridBagConstraints.HORIZONTAL;

            // Display Titles
            titleLabel[0] = new JLabel("# Epoch");
            titleLabel[0].setFont(new Font("Ubuntu", Font.BOLD,15));
            if (shouldWeightX) {
                c.weightx = 0.25;
            }
            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 0;
            c.gridy = 0;
            c.ipadx = 30;
            pane.add(titleLabel[0], c);

            titleLabel[1] = new JLabel("Distribution");
            titleLabel[1].setFont(new Font("Ubuntu", Font.BOLD,15));
            if (shouldWeightX) {
                c.weightx = 0.25;
            }
            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 1;
            c.gridy = 0;
            c.ipadx = 30;
            pane.add(titleLabel[1], c);

            titleLabel[2] = new JLabel("# Queries");
            titleLabel[2].setFont(new Font("Ubuntu", Font.BOLD,15));
            if (shouldWeightX) {
                c.weightx = 0.25;
            }
            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 2;
            c.gridy = 0;
            c.ipadx = 30;
            pane.add(titleLabel[2], c);

            titleLabel[3] = new JLabel("Query Repetition");
            titleLabel[3].setFont(new Font("Ubuntu", Font.BOLD,15));
            if (shouldWeightX) {
                c.weightx = 0.25;
            }
            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 3;
            c.gridy = 0;
            //  c.ipadx = 30;
            pane.add(titleLabel[3], c);

            titleLabel[4] = new JLabel("# Sub-queries");
            titleLabel[4].setFont(new Font("Ubuntu", Font.BOLD,15));
            if (shouldWeightX) {
                c.weightx = 0.25;
            }
            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 4;
            c.gridy = 0;
            //  c.ipadx = 30;
            pane.add(titleLabel[4], c);

            titleLabel[5] = new JLabel("Sub-query Repetition");
            titleLabel[5].setFont(new Font("Ubuntu", Font.BOLD,15));
            if (shouldWeightX) {
                c.weightx = 0.25;
            }
            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 5;
            c.gridy = 0;
            //  c.ipadx = 30;
            pane.add(titleLabel[5], c);


            // to create number of epochs

            for (int j=1; j <= epochs; j++){
                // epoch number

                epochLabel[j-1] = new JLabel("Epoch "+(j));
                if (shouldWeightX) {
                    c.weightx = 0.25;
                }
                c.fill = GridBagConstraints.HORIZONTAL;
                c.gridx = 0;
                c.gridy = j;
                pane.add(epochLabel[j-1], c);

                // distribution options

                distCombo[j-1] = new JComboBox(distStrings);
                distCombo[j-1].setSelectedIndex(0);
                c.fill = GridBagConstraints.HORIZONTAL;
                c.weightx = 0.25;
                c.gridx = 1;
                c.gridy = j;
                pane.add(distCombo[j-1], c);
                final int finalJ1 = j-1;
                distCombo[j-1].addActionListener(new ActionListener () {
                    public void actionPerformed(ActionEvent e) {
                        //doSomething();
                        String tempStr = (String)distCombo[finalJ1].getSelectedItem();
                        if (tempStr.equals("")) percentSubqueryRepetition[finalJ1] ="";

                        else {
                            distributions[finalJ1] = tempStr;
                        }
                        distComboActionPerformed(e, finalJ1);
                    }
                });
                           /*
                           String tempStr =  (String)SQCombo[finalJ1].getSelectedItem();
                        if (tempStr.equals("")) percentSubqueryRepetition[finalJ1] ="";

                        else {
                           // tempStr = tempStr.substring(0,tempStr.length()-1);
                            percentSubqueryRepetition[finalJ1] = tempStr;
                            // System.out.println(percentSubqueryRepetition[finalJ1]);
                        }
                            */

                //no of queries options
                Integer[] numbQ = {0,1000, 2500, 5000, 10000, 20000};
                numbQCombo[j-1] = new JComboBox(numbQ);
                numbQCombo[j-1].setSelectedIndex(0);
                c.fill = GridBagConstraints.HORIZONTAL;
                c.weightx = 0.25;
                c.gridx = 2;
                c.gridy = j;
                pane.add(numbQCombo[j-1], c);

                numbQCombo[j-1].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        //System.out.println(numbQCombo[finalJ1].getSelectedItem());
                        numbQs[finalJ1] = (Integer)(numbQCombo[finalJ1].getSelectedItem());
                    }
                });



                //Query repetition options
                //String[] qr = {"None","Poisson","Exponential","Uniform","Grading","Random"};
                QRCombo[j-1] = new JComboBox(distStrings);
                QRCombo[j-1].setSelectedIndex(0);
                c.fill = GridBagConstraints.HORIZONTAL;
                // c.ipady = 40;      //make this component tall
                // c.weightx = 0.0;
                // c.gridwidth = 3;
                c.gridx = 3;
                c.gridy = j;
                pane.add(QRCombo[j-1], c);

                QRCombo[j-1].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        String tempStr =  (String)QRCombo[finalJ1].getSelectedItem();
                        if (tempStr.equals("")) percentQueryRepetition[finalJ1] ="";

                        else {
                           // tempStr = tempStr.substring(0,tempStr.length()-1);
                            percentQueryRepetition[finalJ1] = tempStr;
                            // System.out.println(percentQueryRepetition[finalJ1]);
                        }


                    }
                });


                //no of sub-queries options
                Integer[] numbSubQ = {1,2,3,4,5};
                numbSubQCombo[j-1] = new JComboBox(numbSubQ);
                numbSubQCombo[j-1].setSelectedIndex(0);
                c.fill = GridBagConstraints.HORIZONTAL;
                c.weightx = 0.5;
                c.gridx = 4;
                c.gridy = j;
                pane.add(numbSubQCombo[j-1], c);

                numbSubQCombo[j-1].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        //System.out.println(numbQCombo[finalJ1].getSelectedItem());
                        numbSubQs[finalJ1] = (Integer)(numbSubQCombo[finalJ1].getSelectedItem());
                    }
                });

                //sub-query repetition options
                //String[] sqc = {"None","Poisson","Exponential","Uniform","Grading","Random"};
                SQCombo[j-1] = new JComboBox(distStrings);
                SQCombo[j-1].setSelectedIndex(0);
                c.fill = GridBagConstraints.HORIZONTAL;

                c.gridx = 5;       //aligned with button 2
                //c.gridwidth = 2;   //2 columns wide
                c.gridy = j;       //third row
                pane.add(SQCombo[j-1], c);

                SQCombo[j-1].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {


                        String tempStr =  (String)SQCombo[finalJ1].getSelectedItem();
                        if (tempStr.equals("")) percentSubqueryRepetition[finalJ1] ="";

                        else {
                           // tempStr = tempStr.substring(0,tempStr.length()-1);
                            percentSubqueryRepetition[finalJ1] = tempStr;
                            // System.out.println(percentSubqueryRepetition[finalJ1]);
                        }

                        // to fill in the table on the side
                        String rowTitles[] = new String[]{"Epoch#", "# Queries","Query arrival","QueryRepetition","# sub-queries","Sub-que Repeat"};
                        dtm.addRow(new Object[]{rowTitles[0],(finalJ1+1)});
                        dtm.addRow(new Object[]{rowTitles[1],numbQs[finalJ1]});
                        dtm.addRow(new Object[]{rowTitles[2],distributions[finalJ1]});
                        dtm.addRow(new Object[]{rowTitles[3],percentQueryRepetition[finalJ1]});
                        dtm.addRow(new Object[]{rowTitles[4],numbSubQs[finalJ1]});
                        dtm.addRow(new Object[]{rowTitles[5],percentSubqueryRepetition[finalJ1]});

                    }
                });
            }
        }
    }

    private void distComboActionPerformed(java.awt.event.ActionEvent evt, int j){
        int type =0;
        String distribution = (String)distCombo[j].getSelectedItem();

        // to dynamically change values
        distributions[j] = distribution;
        if (distribution.equals("Poisson"))    type = 1;
        else if (distribution.equals("Exponential")) type = 2;
        else if (distribution.equals("Uniform")) type = 3;
        else if (distribution.equals("Grading")) type = 4;
        else if (distribution.equals("Random")) type = 5;
        else if (distribution.equals("")) type = 6;

        switch(type){
            case 1: {
                epochLabelArray[j].setIcon(new javax.swing.ImageIcon(getClass().getResource("poisson.png")));
                epochLabelArray[j].validate();
                epochLabelArray[j].repaint();
                JTextField mean = new JTextField(5);
                 JTextField variance = new JTextField(5);

                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("mean:"));
                myPanel.add(mean);
                myPanel.add(Box.createHorizontalStrut(15)); // a spacer
                myPanel.add(new JLabel("variance:"));
                 myPanel.add(variance);

                int result = JOptionPane.showConfirmDialog(this, myPanel,
                        "Please enter mean value. Please provide <= number of queries", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    System.out.println("mean: " + mean.getText());

                    // System.out.println("variance: " + variance.getText());
                    meanValues[j] = Double.parseDouble(mean.getText());
                    varianceValues[j] = Double.parseDouble(variance.getText());
                    epochLabelArray[j].setToolTipText("Poisson mean:"+mean.getText());

                }
                break;
            }
            case 2:{
                epochLabelArray[j].setIcon(new javax.swing.ImageIcon(getClass().getResource("Exponential.png")));
                epochLabelArray[j].validate();
                epochLabelArray[j].repaint();
                JTextField mean = new JTextField(5);

                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("mean:"));
                myPanel.add(mean);
                //myPanel.add(Box.createHorizontalStrut(15)); // a spacer

                int result = JOptionPane.showConfirmDialog(this, myPanel,
                        "Please enter mean value", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    System.out.println("mean: " + mean.getText());
                    meanExponentialValues[j] = Double.parseDouble(mean.getText());
                    epochLabelArray[j].setToolTipText("Exponential mean:"+mean.getText());
                }

                break;
            }
            case 3:{
                epochLabelArray[j].setIcon(new javax.swing.ImageIcon(getClass().getResource("Uniform.png")));
                epochLabelArray[j].validate();
                epochLabelArray[j].repaint();

                JTextField lower = new JTextField(5);
                JTextField upper = new JTextField(5);

                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("Lower limit:"));
                myPanel.add(lower);
                myPanel.add(Box.createHorizontalStrut(15)); // a spacer
                myPanel.add(new JLabel("Upper limit:"));
                myPanel.add(upper);

                int result = JOptionPane.showConfirmDialog(this, myPanel,
                        "Please enter lower and upper limits", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION){
                    System.out.println("lower:"+lower.getText()+", upper:"+upper.getText());
                    if(Integer.parseInt(lower.getText()) > Integer.parseInt(upper.getText())){
                           JOptionPane.showMessageDialog(this,"Lower limit cannot be greater than Upper");
                    }
                    uniformLowerLimit[j] = Integer.parseInt(lower.getText());
                    uniformUpperLimit[j] = Integer.parseInt(upper.getText());

                    epochLabelArray[j].setToolTipText("Uniform lower limit:"+lower.getText()+", upper limit:"+upper.getText());
                }

                break;
            }
            case 4: {
                epochLabelArray[j].setIcon(new javax.swing.ImageIcon(getClass().getResource("gradient.png")));
                epochLabelArray[j].validate();
                epochLabelArray[j].repaint();
                JTextField slope = new JTextField(5);
                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("Slope:"));
                myPanel.add(slope);

                int result = JOptionPane.showConfirmDialog(this, myPanel, "Slope. -ve slope= -1", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION){
                    System.out.println("Slope: "+slope.getText());
                }
                slopeValue[j] = Integer.parseInt(slope.getText());
                epochLabelArray[j].setToolTipText("Slope:"+slope.getText());

                break;
            }
            case 5:{
                epochLabelArray[j].setIcon(new javax.swing.ImageIcon(getClass().getResource("Random.png")));
                epochLabelArray[j].validate();
                epochLabelArray[j].repaint();
                break;
            }
            default: {
                epochLabelArray[j].setIcon(new javax.swing.ImageIcon(getClass().getResource("Blank.png")));
                epochLabelArray[j].validate();
                epochLabelArray[j].repaint();
                break;
            }
        }


    }

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        for (int i =0; i<6; i++){
            numbQCombo[i] = new JComboBox(distStrings);
            numbQCombo[i].setSelectedIndex(0);
            QRCombo[i].setSelectedIndex(0);
            SQCombo[i].setSelectedIndex(0);
            distributions[i] = "";
            distCombo[i].setSelectedIndex(0);
            numbQs[i] =0;
            numbSubQs[i] = 0;

            percentQueryRepetition[i]="";
            percentSubqueryRepetition[i] ="";
            dtm.fireTableDataChanged();
            dtm.setRowCount(0);

            meanValues[i]=0;
            varianceValues[i]= 0;
            meanExponentialValues[i]=0;
            uniformLowerLimit[i]=0;
            uniformUpperLimit[i]=0;
            slopeValue[i]= 0;
        }
    }

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
        // TODO add your handling code here:
        //check for null values
        for(int i=0; i <noEpochs; i++){
            if ( (distributions == null) || (distributions[i]== null) || (distributions[i].equals("")) ) {
                JOptionPane.showMessageDialog(this, "Query distribution for Epoch " + i + " is missing");
                return;
            }

        }

        QueryGenerator queryGenerator = new QueryGenerator();
        queryGenerator.setDistributions(distributions);
        queryGenerator.setMeanExponentialValues(meanExponentialValues);
        queryGenerator.setMeanValues(meanValues);
        queryGenerator.setVarianceValues(varianceValues);
        queryGenerator.setNoEpochs(noEpochs);
        queryGenerator.setNumbQs(numbQs);
        queryGenerator.setPercentQueryRepetition(percentQueryRepetition);
        queryGenerator.setNumbSubQs(numbSubQs);
        queryGenerator.setPercentSubqueryRepetition(percentSubqueryRepetition);
        queryGenerator.setUniformLowerLimit(uniformLowerLimit);
        queryGenerator.setUniformUpperLimit(uniformUpperLimit);
        queryGenerator.setSlopeValue(slopeValue);

        int reply = JOptionPane.showConfirmDialog(this,"Do you want to use the default configuration file?");
        if (reply == JOptionPane.YES_OPTION){
            this.configXMLfile = new File("//home//santhilata//Dropbox//CacheLearning//QGen//src//main//java//SimpleGui//ConfigProperties.xml");

        }
        else{
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int option = jfc.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION){
                this.configXMLfile = jfc.getSelectedFile();
            }
        }

        XStream xstream = new XStream(new StaxDriver());
        queryGenerator.setConfiguration( (ConfigurationClass) xstream.fromXML(this.configXMLfile));//to read config file details


        ArrayList<File> inputFiles = queryGenerator.generateQuerySet();

        for (File sampleFile:   inputFiles ) {


            int changeLoc = JOptionPane.showConfirmDialog(this, "Your file is saved at" + sampleFile.getCanonicalPath() + ".\n Do you want to save at some other location?");
            //  if you want to save at some other location
            if (changeLoc == JOptionPane.YES_OPTION) {

                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Save as a txt");


                fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                int replyF = fileChooser.showSaveDialog(this);


                if (replyF == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = new File(fileChooser.getSelectedFile().getAbsolutePath());
                    FileInputStream instream = null;
                    FileOutputStream outstream = null;

                    try {
                        File infile = sampleFile;
                        File outfile = selectedFile;

                        instream = new FileInputStream(infile);
                        outstream = new FileOutputStream(outfile);

                        byte[] buffer = new byte[1024];

                        int length;
                /*copying the contents from input stream to
                 * output stream using read and write methods
                 */
                        while ((length = instream.read(buffer)) > 0) {
                            outstream.write(buffer, 0, length);
                        }

                        //Closing the input/output file streams
                        instream.close();
                        outstream.close();

                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    }

                    sampleFile.delete();// deletes the original file
                    JOptionPane.showMessageDialog(this, "file saved as " + fileChooser.getSelectedFile().getAbsoluteFile());
                }
            }
        }


    }

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(this,"Do you want to exit?","Query Generator",JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }

    private void EpochComboItemStateChanged(java.awt.event.ItemEvent evt) {
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.DESELECTED)
            return;

        Epoch_pics.invalidate();
        Epoch_pics.removeAll();
        Epoch_pics.repaint();

        noEpochs = Integer.parseInt((String)EpochCombo.getSelectedItem());

        addLabels(Epoch_pics,noEpochs);

        Epoch_tabs.invalidate();
        Epoch_tabs.removeAll();
        Epoch_tabs.repaint();
        dtm.setRowCount(0);


        addComponents(Epoch_tabs, noEpochs);
        Epoch_tabs.setVisible(true);
    }

    /**
     * To add picture labels to represent epoch query distribution
     * @param pane
     * @param epochs
     */
    public void addLabels(JPanel pane, int epochs){
        for (int i=0; i< epochs; i++){
            epochLabelArray[i] = new JLabel();
            epochLabelArray[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("Blank.png")));
            epochLabelArray[i].setVisible(true);

            int initialIndex = 10;

            Epoch_pics.add(epochLabelArray[i]);
            epochLabelArray[i].setBounds(initialIndex+(i*130),0, 130,120);


            pane.revalidate();
            pane.repaint();
        }
    }

    public String[] getDistributions() {
        return distributions;
    }
    public int[] getNumbQs() {
        return numbQs;
    }
    public String[] getPercentQueryRepetition() {
        return percentQueryRepetition;
    }
    public int[] getNumbSubQs(){
        return  numbSubQs;
    }
    public String[] getPercentSubqueryRepetition() {
        return percentSubqueryRepetition;
    }

    int noEpochs ;
    double[] meanValues = new double[7];
    double[] varianceValues = new double[7];
    double[] meanExponentialValues = new double[7];

    int[] uniformLowerLimit = new int[7];
    int[] uniformUpperLimit = new int[7];
    double[] slopeValue = new double[7];


    DefaultTableModel dtm = new DefaultTableModel(0, 0);
    JLabel[] epochLabelArray = new JLabel[6];

    JLabel[] titleLabel = new JLabel[7];
    JLabel[] epochLabel = new JLabel[7];
    JComboBox[] distCombo = new JComboBox[7];
    JComboBox[] numbQCombo = new JComboBox[7];
    JComboBox[] numbSubQCombo = new JComboBox[7];
    JComboBox[] QRCombo = new JComboBox[7];
    JComboBox[] SQCombo = new JComboBox[7];

    String[] distributions = new String[7];
    int[] numbQs = new int[7];
    int[] numbSubQs = new int[7];
    String[] percentQueryRepetition = new String[7];
    String[] percentSubqueryRepetition = new String[7];
    File configXMLfile = null;

    String[] distStrings= {"None","Poisson","Exponential","Uniform","Grading","Random"};
    // Variables declaration - do not modify
    private javax.swing.JComboBox EpochCombo;
    private javax.swing.JPanel Epoch_pics;
    private javax.swing.JPanel Epoch_tabs;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JTable featureTable;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton resetButton;
    // End of variables declaration
}

